@page "/Register"
@using BookStoreUI.Models
@using BookStoreUI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navMan

<div class="card">
    <h3 class="card-title">Register Now</h3>
    @if (!response)
    {
        <div class="alert alert-danger">
            Smth went wrong with registration attempt!
        </div>
    }
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleRegistration">

            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText class="form-control" Id="email" @bind-Value="Model.Username" />
                <ValidationMessage For="@(() => Model.Username)" />

            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText class="form-control" Id="password" type="password" @bind-Value="Model.Password" />
                <ValidationMessage For="@(() => Model.Password)" />

            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm Password</label>
                <InputText class="form-control" Id="confirmpassword" type="password" @bind-Value="Model.ConfirmPassword" />
                <ValidationMessage For="@(() => Model.ConfirmPassword)" />

            </div>
            <button type="submit" class="btn btn-primary btn-block">Register</button>

        </EditForm>
    </div>
</div>

@code {
    private RegistrationModel Model = new RegistrationModel();
    bool response = true;

    private async Task HandleRegistration()
    {
        var response = await _authRepo.Register(Model);

        if (response)
        {
            _navMan.NavigateTo("/login");
        }
        
    }

}
